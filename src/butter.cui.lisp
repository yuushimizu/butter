(in-package :cl-user)
(defpackage :butter.cui
  (:use :common-lisp :butter)
  (:export :begin :run))
(in-package :butter.cui)
(defun test-context-name-lines (context)
  (if context
      (concatenate 'string
                   (format nil "~&#  in ~A~%" (test-context-name context))
                   (test-context-name-lines (test-context-parent context)))
      nil))
(defun call-with-test-counter (function)
  (let ((succeeded 0) (failed 0))
    (handler-bind ((test-succeeded (lambda (condition) (declare (ignore condition)) (incf succeeded)))
		   (test-failed (lambda (condition) (declare (ignore condition)) (incf failed))))
      (values (funcall function) succeeded failed))))
(defun call-with-default-test-printer (function &key (stream *standard-output*) (show-details nil) (invoke-debugger nil))
  (handler-bind ((test-succeeded (lambda (condition)
                                   (let ((*print-pretty*))
                                     (when show-details (format stream "~&ok - ~A~%" (test-context-name (test-condition-context condition)))))))
                 (test-failed (lambda (condition)
                                (let ((*print-pretty*))
                                  (format stream "~&not ok - ~A~%#  ~A~%~A"
                                          (test-context-name (test-condition-context condition))
                                          (test-failed-message condition)
                                          (test-context-name-lines (test-condition-context condition))))))
                 (error (lambda (condition)
                          (if invoke-debugger
                              (invoke-debugger condition)
                              (let ((*print-pretty*))
                                (invoke-restart 'fail-test (format nil "The error ~S was occurred with the message \"~A\"." condition condition)))))))
    (funcall function)))
(defmacro begin (&body form)
  `(call-with-default-test-printer (lambda () ,@form) :show-details t :invoke-debugger nil))
(defun call-with-default-suite-printer (function &optional (stream *standard-output*))
  (multiple-value-bind (result succeeded failed)
      (call-with-test-counter function)
    (format stream "~&# Failed ~A/~A tests.~%" failed (+ succeeded failed))
    result))
(defun run (package &key (stream *standard-output*) (show-details nil) (invoke-debugger nil))
  (let ((*package* (find-package package)))
    (call-with-default-suite-printer
     (lambda () (reduce (lambda (result test-name)
                          (and (call-with-default-test-printer (lambda ()
                                                                 (when show-details (format stream "~&# ~A~%" test-name))
                                                                 (run-test test-name *package*))
                                                               :stream stream
                                                               :show-details show-details
                                                               :invoke-debugger invoke-debugger)
                               result))
                        (test-names package)
                        :initial-value t)))))
